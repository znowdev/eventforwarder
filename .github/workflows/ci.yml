name: Release CI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    env:
        REGISTRY: ghcr.io
        IMAGE_NAME: ${{ github.repository }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Build Go binaries
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -installsuffix cgo -ldflags="-X 'main.Version=${{ github.ref }}'" -o ./bin/reqbouncer_linux_amd64
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -installsuffix cgo -ldflags="-X 'main.Version=${{ github.ref }}'" -o ./bin/reqbouncer_linux_arm64
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -installsuffix cgo -ldflags="-X 'main.Version=${{ github.ref }}'" -o ./bin/reqbouncer_darwin_amd64
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -installsuffix cgo -ldflags="-X 'main.Version=${{ github.ref }}'" -o ./bin/reqbouncer_darwin_arm64
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -installsuffix cgo -ldflags="-X 'main.Version=${{ github.ref }}'" -o ./bin/reqbouncer_windows_amd64

      - name: Archive production artifacts
        run: |
          tar -czvf ./bin/reqbouncer_linux_amd64.tar.gz -C ./bin/ reqbouncer_linux_amd64
          tar -czvf ./bin/reqbouncer_linux_arm64.tar.gz -C ./bin/ reqbouncer_linux_arm64
          tar -czvf ./bin/reqbouncer_darwin_amd64.tar.gz -C ./bin/ reqbouncer_darwin_amd64
          tar -czvf ./bin/reqbouncer_darwin_arm64.tar.gz -C ./bin/ reqbouncer_darwin_arm64
          tar -czvf ./bin/reqbouncer_windows_amd64.tar.gz -C ./bin/ reqbouncer_windows_amd64

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: ./bin/*.tar.gz

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            type=sha,format=long
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false